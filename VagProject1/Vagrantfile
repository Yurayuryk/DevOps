# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.define "nginx-server" do |vm1|
    vm1.vm.hostname = "nginx-server"
    vm1.vm.box = "centos/7"
    vm1.vm.box_version = "1905.1"
    vm1.vm.network "private_network", ip: "192.168.33.10"
    vm1.vm.network "forwarded_port", guest: 80, host: 8888
    vm1.vm.provision "shell", path: "./nginx.sh"
    vm1.vm.provision "shell",path:"./docker.sh"
    vm1.vm.synced_folder "./nginx_share","/home/vagrant/www-content",type:"virtualbox"
    vm1.vm.provider "virtualbox" do |vb|
      vb.name = "nginx-server"
      vb.gui = false
      vb.memory = 1024
      v.cpus = 2
    end	
  end
  config.vm.define "ubuntu" do |vm2|
    vm2.vm.hostname = "ubuntu"
    vm2.vm.box = "generic/ubuntu1804"
    vm2.vm.network "private_network", ip: "192.168.33.20"
    vm2.vm.provision "shell", path: "./mount.sh"
    vm2.vm.synced_folder "./ubuntu_share","/home/vagrant/www-content",type:"virtualbox"
    vm2.vm.provider "virtualbox" do |vb|
      vb.name = "ubuntu"
      vb.gui = false
      vb.memory = 1024
      vb.cpus = 2
      (1..4).each do |i|
        unless File.exist?("mydisk#{i}.vmdk")
          if i == 1 then
            vb.customize ['storagectl', 'ubuntu', '--name', 'mySATA Controller', '--add', 'sata', '--portcount',6]
          end
          vb.customize [ "createmedium", "disk", "--filename","mydisk#{i}.vmdk", "--format", "vmdk", "--size", 300 ]
	end
        vb.customize [ "storageattach", 'ubuntu' , "--storagectl", "mySATA Controller", "--port", "#{i}", "--device", "0", "--type", "hdd", "--medium","mydisk#{i}.vmdk"]
      end
    end
  end
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
    
  #SHELL
end
